package Cup;
import CodeGeneration.OpCodes;
import CodeGeneration.ThreeAddressCode;
import CodeGeneration.VarnameCreator;
import Errorhandling.Errors;
import Expressions.Block;
import Expressions.Declarations.*;
import Expressions.Expressions.*;
import Expressions.ParameterList;
import Expressions.Program;
import Expressions.Statement.*;
import SymbolTable.*;
import Typing.ConstantTypeInfo;
import Typing.FunctionTypeInfo;
import Typing.Types;
import Typing.VariableTypeInfo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;


action code {:

  public SymbolTable scope = new SymbolTable();    
  ArrayList<ThreeAddressCode> program = new ArrayList<ThreeAddressCode>();
:}
   
parser code {:

	public VariableSymTabInfo GenerateVariable(Types type)
	{
	  String varname = VarnameCreator.getInstance().CreateName();
	  VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(type), varname);
	  return vsti;
	}
    public StringSymTabInfo CreateLabel()
    {
        String label = VarnameCreator.getInstance().CreateLabel();
        ConstantTypeInfo cti = new ConstantTypeInfo(Types.STRING);
        StringSymTabInfo falseLabelSymtabInfo = new StringSymTabInfo(cti, label);
        return falseLabelSymtabInfo;

    }
    public StringSymTabInfo CreateLabel(String name)
    {
        String label = VarnameCreator.getInstance().CreateLabel(name);
        ConstantTypeInfo cti = new ConstantTypeInfo(Types.STRING);
        StringSymTabInfo falseLabelSymtabInfo = new StringSymTabInfo(cti, label);
        return falseLabelSymtabInfo;

    }
    public StringSymTabInfo CreateFunctionLabel(String name)
    {
        // Create a label that indicates the beginning of this function
        String label = VarnameCreator.getInstance().CreateFunctionLabel(name);
        ConstantTypeInfo cti = new ConstantTypeInfo(Types.STRING);
        StringSymTabInfo beginFunLabelSymtabInfo = new StringSymTabInfo(cti, label);
        return beginFunLabelSymtabInfo;
    }
    public void report_warning(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Warning");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
	/* Change the method report_error so it will display the line and
	   column of where the error occurred in the input as well as the
	   reason for the error which is passed into the method in the
	   String 'message'. */

	public void report_error(String message, Object info) {
   
		/* Create a StringBuffer called 'm' with the string 'Error' in it. */
		StringBuffer m = new StringBuffer("Error");
   
		/* Check if the information passed to the method is the same
		   type as the type java_cup.runtime.Symbol. */
		if (info instanceof java_cup.runtime.Symbol) {
			/* Declare a java_cup.runtime.Symbol object 's' with the
			   information in the object info that is being typecasted
			   as a java_cup.runtime.Symbol object. */
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
			/* Check if the line number in the input is greater or
			   equal to zero. */
			if (s.left >= 0) {                
				/* Add to the end of the StringBuffer error message
				   the line number of the error in the input. */
				m.append(" in line "+(s.left+1));
				/* Check if the column number in the input is greater
				   or equal to zero. */
				if (s.right >= 0)                    
					/* Add to the end of the StringBuffer error message
					   the column number of the error in the input. */
					m.append(", column "+(s.right+1));
			}
		}
   
		/* Add to the end of the StringBuffer error message created in
		   this method the message that was passed into this method. */
		m.append(" : "+message);
   
		/* Print the contents of the StringBuffer 'm', which contains
		   an error message, out on a line. */
		System.err.println(m);
	}



	

:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal           NEQUAL, EQUAL, GREATER, LESS, NOT;
terminal           TIMES, MINUS, DIVIDE, PLUS;
terminal           WRITE, READ;
terminal           LENGTH;
terminal           WHILE, DO;
terminal           EOL;
terminal           INT;
terminal           IF, ELSE;
terminal           LPAR, RPAR, LBRACE, RBRACE, LBRACK, RBRACK;
terminal           RETURN;
terminal           ASSIGN, SEMICOLON, COMMA, DOT;
terminal           LOW, UMINUS;



terminal Integer   NUMBER;
terminal String      CHAR;
terminal String    NAME;

non terminal Expression                exp;
non terminal Statement                 statement;
non terminal StatementList             statements;
non terminal FunctionDeclaration       fun_declaration;
non terminal BooleanExpression         bexp;
non terminal Declaration               declaration, var_declaration;
non terminal DeclarationList           var_declarations;
non terminal Program                   program, total;
non terminal ParameterList             pars;
non terminal Types                     type;
non terminal Block                     block;

non terminal SymTabInfo                formal_par, lexp;
non terminal LinkedList<SymTabInfo>    formal_pars, formal_params_non_empty;

/* ------------ Precedence declarations ------------------------------------ */

precedence nonassoc LOW;
precedence nonassoc ELSE;
precedence left     GREATER, LESS, EQUAL, NEQUAL;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIVIDE;
precedence left     UMINUS;
precedence left     DOT, LBRACK;
/* ----------------------------Grammar Section------------------------------ */
// The total rule only serves as a rule so we can execute code at the EOF.
// Parsing the EOF token gave me some trouble so I skipped it and found this dirty solution.
// It works however, so I'm leaving it in pace. The codeblock can be used to print the
// symbol table for example after a succesful parse.

total                   ::=   program:p                                  {:
                                                                             // total
                                                                             //System.out.println(p.toString());
                                                                             p.setSymbolTable(scope);
                                                                             RESULT = p;
                                                                         :}
                          ;
program                 ::=   program:ps declaration:p                   {:
                                                                             // program
                                                                             // We have a CodeContainer which contains our entire program at this point.
                                                                             // program is a LinkedList<CodeContainer> and declaration is a single CodeContainer.
                                                                             // program can be null as well.
                                                                             Program pgrm = new Program();
                                                                             pgrm.AddDeclarations(ps);
                                                                             pgrm.AddDeclaration(p);
                                                                             RESULT = pgrm;
                                                                         :}
						  | /* Empty */
						  ;


declaration             ::=  fun_declaration:fd                          {:
                                                                             // declaration
                                                                             RESULT = fd;
                                                                         :}
						  |  var_declaration:vd                          {:
						                                                     // When this declaration is parsed we 
                                                                             // are dealing with a global declaration so we treat it differently.
                                                                             vd.setGlobal(true);
                                                                             RESULT = vd;
						                                                 :}
						  ;

fun_declaration         ::=  type:rt NAME:n
                                                                         {: // fun_declaration
                                                                            // Create symboltable entry
                                                                            if(scope.ContainsName(n))
                                                                            {
                                                                                String error = "Function with name '" + n + "' already declared in this scope!";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            }
                                                                            FunctionSymTabInfo vsti = new FunctionSymTabInfo(null, n);
                                                                            // We insert it in the current scope but we update values later
                                                                            scope.Insert(vsti);
                                                                            scope = scope.NewScope();
                                                                            scope.function = vsti;
                                                                         :}
                             LPAR formal_pars:ps RPAR
                                                                         {:
                                                                            // Attach the parameters to the type
                                                                            // of the function defining the current scope
                                                                            scope.function.typeInfo = new FunctionTypeInfo(new VariableTypeInfo(rt), ps);
																		 :}
					         block:b
					                                                     {:
                                                                            StringSymTabInfo funLabel = parser.CreateFunctionLabel(n);
					                                                        scope = scope.parent;
                                                                            FunctionDeclaration f = new FunctionDeclaration();
                                                                            f.setBeginLabel(funLabel);
                                                                            f.setBody(b);
                                                                            f.setParameters(ps);
                                                                            
                                                                            RESULT = f;
					                                                     :}
						   ;

formal_pars             ::=  formal_params_non_empty:ps                  {: // formal_pars
                                                                            RESULT = ps;
                                                                         :}
						  |
						  ;

formal_params_non_empty ::= formal_par:p COMMA formal_params_non_empty:ps     {:
                                                                                // formal_params_non_empty
                                                                                ps.addFirst(p);
                                                                                RESULT = ps;
                                                                              :}
                          | formal_par:p                                      {:
                                                                                RESULT = new LinkedList<SymTabInfo>(Arrays.asList(p));
                                                                              :}
                          ;

formal_par              ::= type:t NAME:n
                                                                         {:
                                                                            // formal_par
                                                                            VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(t), n);
                                                                            // The current scope is the function itself,
                                                                            // So we add this parameter to the scope..
                                                                            scope.Insert(vsti);
                                                                            RESULT = vsti;
                                                                         :}
                          | type:t NAME:n LBRACK NUMBER:size RBRACK      {:
                                                                            // Create expression that indicates the size of this array.    
                                                                            ConstantTypeInfo ti    = new ConstantTypeInfo(Types.INTEGER);
                                                                            IntegerSymTabInfo csti = new IntegerSymTabInfo(size.intValue());
                                                                            ConstantExpression ce  = new ConstantExpression(csti, Types.INTEGER);
                                                                            // Inser the array in the symbol table.
                                                                            ArraySymTabInfo asti   = new ArraySymTabInfo(new VariableTypeInfo(t), n, ce);
                                                                            scope.Insert(asti);    
                                                                            RESULT = asti;                  
                                                                         :}
						  ;

block                   ::= LBRACE                                       {:
                                                                            // block
                                                                            // We open a new block so we create a new scope
                                                                            //We close the scope and put it back as the parent.
                                                                            scope = scope.NewScope();
                                                                         :}
                            var_declarations:vds statements:sts 
                            RBRACE                                       {:
                                                                            scope = scope.parent;
                                                                            Block b = new Block(vds, sts);
                                                                            RESULT = b;
                                                                         :}
						  ;

var_declaration         ::= type:t NAME:n SEMICOLON                      {: 
                                                                            // var_declaration
                                                                            if(scope.ContainsName(n))
                                                                            {
                                                                                String error = "Variable with name '" + n + "' already declared in this scope!";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            }

                                                                            VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(t), n);
                                                                            scope.Insert(vsti); 
                                                                            
                                                                            VariableDeclaration vdec = new VariableDeclaration();
                                                                            vdec.setVariable(vsti);
                                                                            RESULT = vdec;

                                                                            
                                                                         :}
                          | type:t NAME:n LBRACK exp:size RBRACK SEMICOLON {:
                                                                            ArraySymTabInfo asti = new ArraySymTabInfo(new VariableTypeInfo(t), n, size);
                                                                            scope.Insert(asti);
                                                                            
                                                                            ArrayDeclaration arrDec = new ArrayDeclaration();
                                                                            arrDec.setVariable(asti);
                                                                            RESULT = arrDec;                                                                        
                                                                           :}
						  ;

var_declarations        ::= var_declaration:v var_declarations:vs          {:
                                                                             RESULT = new DeclarationList(v);
                                                                             RESULT.addDeclarations(vs);
                                                                                
                                                                           :}
						  | /* Nothing */
						  ;

type                    ::= INT                                          {: // type
                                                                            /* We create a new TypeInfo that holds that the value is an integer
																			 * We then attach this type to the value of 'type'
																			 * INT and FLOAT are simple types
																			 * Arrays and structs are complex types..
																			 */ 
																			RESULT = Types.INTEGER;
																		 :}
						  | CHAR
                                                                         {:
                                                                             RESULT = Types.CHAR;
                                                                         :}
						  ;

statements                  ::= statement:st SEMICOLON statements:sts    {:
                                                                            // statements
                                                                            // Append the statement to the statements
                                                                            RESULT = new StatementList(st);
                                                                            RESULT.AddStatements(sts);
                                                                         :}
							  | /* Nothing */
							  ;

statement                   ::= IF LPAR bexp:cond RPAR statement:cons        {:
                                                                             Block consequent = new Block();
                                                                             consequent.addStatement(cons);
                                                                             
                                                                             cond.setTrueCode(consequent);

                                                                             IfStatement iex = new IfStatement();
                                                                             iex.setBexp(cond);
                                                                             RESULT = iex;
                                                                         :}
								%prec LOW
                              | IF LPAR bexp:cond RPAR block:cons ELSE block:alt  {:
                                                                             cond.setTrueCode(cons);
                                                                             cond.setFalseCode(alt);

                                                                             IfElseStatement iex = new IfElseStatement();
                                                                             iex.setBexp(cond);
                                                                             RESULT = iex;                                                                       
                                                                         :}
							  | WHILE LPAR exp RPAR statement
							  | lexp:tar ASSIGN exp:ex                   {:
                                                                            // Check to see if we are assigning proper types
                                                                            
                                                                            AssignStatement as = new AssignStatement(tar, ex);
                                                                            RESULT = as;
                                                                         :}
							  | RETURN exp:e                             {:
                                                                            //parser.Throw("Can not return other type than char or int!");                                
                                                                            // The variable that holds the result of the expression is
                                                                            // is held inside e.symTabInfo. So we pass that to the TAC constructor.
                                                                            ReturnStatement rs = new ReturnStatement(e);
                                                                            
                                                                            rs.setReturnType(scope.function.getTypeInfo().ActualType());
                                                                            RESULT = rs;
                                                                         :}
							  | WRITE exp:e                              {:
							                                                // Print statement
                                                                            if(e.getExpressionType() != Types.INTEGER && e.getExpressionType() != Types.CHAR)
                                                                            {   
                                                                                String error = "Can not write other type than char or int!";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            }                              
							                                                PrintStatement ps = new PrintStatement(e);
							                                                RESULT = ps;
							                                             :}
							  | READ lexp:var                            {:
							                                                ReadStatement rs = new ReadStatement(var);
							                                                RESULT = rs;
							                                             :}
						     | NAME:n LPAR pars:ps RPAR                  {:
                                                                         // Function Call outside of an expression
                                                                            // Add each TAC for each parameter to the result.
                                                                            // Get the SymTabInfo from the scope

                                                                            // Get the SymTabInfo from the scope
                                                                            VariableSymTabInfo func = scope.LookupFunction(n);
                                                                            if(func == null)
                                                                            {
                                                                                String error = "Function '" + n + "' was not found.";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            }
                                                                            // Check all the types for the parameters
                                                                            ArrayList<SymTabInfo> expected = ((FunctionTypeInfo) func.typeInfo).getParameters();
                                                                            ArrayList<Expression> actualPm = ps.getParameterList();
                                                                            if(expected.size() != actualPm.size())
                                                                            {
                                                                                String error = "Function '" + n + "' is called with wrong number of arguments.";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            }
                                                                            for(int i = 0; i < expected.size(); i++)
                                                                                if(!Typing.Typing.EqualOrBroaderType(actualPm.get(i).getExpressionType(), expected.get(i).typeInfo.ActualType()))
                                                                                {
                                                                                    String error = "Function '" + n + "' is called with wrong types (" + i + "!";
                                                                                    parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                                }


                                                                            // We need the return type, so we get it from the SymTabInfo.
                                                                            FunctionTypeInfo funcTypeInfo = (FunctionTypeInfo) func.typeInfo;

                                                                            VariableSymTabInfo tempVariable = parser.GenerateVariable(funcTypeInfo.ActualType());
                                                                            //scope.Insert(tempVariable);

                                                                            FunctionCallStatement result =
                                                                                    new FunctionCallStatement(tempVariable, funcTypeInfo.ActualType(), func, ps);
                                                                            // Create the TAC for the function call.
                                                                            //program.add(result.ToThreeAddressCode());
                                                                            RESULT = result;
                                                                         :}							                                             
							  ;

lexp                    ::= NAME:n                                       {:
                                                                             // We should have already declared this name
                                                                             // so we simply look it up in the symbol table
                                                                             VariableSymTabInfo lookup = scope.LookupVariable(n);
                                                                            if(lookup == null)
                                                                            {
                                                                                String error = "Variable '" + n + "'' is undefined";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            }                                                                             

                                                                             VariableSymTabInfo var = 
                                                                                new VariableSymTabInfo(lookup.typeInfo, lookup.IdentifiertoString());
                                                                             RESULT = var;
                                                                         :}
						  | lexp:n LBRACK exp:idx RBRACK                 {:
                                                                             // Arrays
                                                                             // Array assignment
                                                                             ArraySymTabInfo array = scope.LookupArray(n.IdentifiertoString());
                                                                            if(array == null)
                                                                            {
                                                                                String error = "Array '" + n + "'' is undefined";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            }  
                                                                             ArrayIndexSymTabInfo arr = 
                                                                             new ArrayIndexSymTabInfo(n.typeInfo,
                                                                                                 n.IdentifiertoString(),
                                                                                                 idx,
                                                                                                 array);
                                                                             RESULT = arr;
                                                                             
                                                                             
                                                                         :}
						  ;
bexp                    ::= exp:e1 GREATER exp:e2                        {:

                                                                             Types resultType = Types.CHAR;
                                                                             if(e1.getExpressionType() == Types.INTEGER || e2.getExpressionType() == Types.INTEGER)
                                                                                 resultType = Types.INTEGER;


                                                                             VariableSymTabInfo tempVariable = parser.GenerateVariable(resultType);
                                                                             //scope.Insert(tempVariable);

                                                                             // Create ArithmeticExpression
                                                                             BooleanExpression exp = new BooleanExpression(resultType, 
                                                                                                                           OpCodes.A2GT, 
                                                                                                                           e1, e2,
                                                                                                                           tempVariable);
                                                                             StringSymTabInfo falseLabel = parser.CreateLabel("False");
                                                                             StringSymTabInfo trueLabel  = parser.CreateLabel("True");
                                                                             StringSymTabInfo endLabel   = parser.CreateLabel("End");

                                                                             exp.setTrueLabel(trueLabel);
                                                                             exp.setFalseLabel(falseLabel);
                                                                             exp.setEndLabel(endLabel);
                                                                             // program.add(exp.ToThreeAddressCode());
                                                                             RESULT = exp;
                                                                         :}                                                                                
                          | exp:e1 LESS    exp:e2                        {:

                                                                             Types resultType = Types.CHAR;
                                                                             if(e1.getExpressionType() == Types.INTEGER || e2.getExpressionType() == Types.INTEGER)
                                                                                 resultType = Types.INTEGER;


                                                                             VariableSymTabInfo tempVariable = parser.GenerateVariable(resultType);
                                                                             //scope.Insert(tempVariable);

                                                                             // Create ArithmeticExpression
                                                                             BooleanExpression exp = new BooleanExpression(resultType, 
                                                                                                                           OpCodes.A2LT, 
                                                                                                                           e1, e2,
                                                                                                                           tempVariable);
                                                                             StringSymTabInfo falseLabel = parser.CreateLabel("False");
                                                                             StringSymTabInfo trueLabel  = parser.CreateLabel("True");
                                                                             StringSymTabInfo endLabel   = parser.CreateLabel("End");

                                                                             exp.setTrueLabel(trueLabel);
                                                                             exp.setFalseLabel(falseLabel);
                                                                             exp.setEndLabel(endLabel);
                                                                             //program.add(exp.ToThreeAddressCode());
                                                                             RESULT = exp;
                                                                         :}   
                          | exp:e1 EQUAL   exp:e2                        {:

                                                                             Types resultType = Types.CHAR;
                                                                             if(e1.getExpressionType() == Types.INTEGER || e2.getExpressionType() == Types.INTEGER)
                                                                                 resultType = Types.INTEGER;


                                                                             VariableSymTabInfo tempVariable = parser.GenerateVariable(resultType);
                                                                             //scope.Insert(tempVariable);

                                                                             // Create ArithmeticExpression
                                                                             BooleanExpression exp = new BooleanExpression(resultType, 
                                                                                                                           OpCodes.A2EQ, 
                                                                                                                           e1, e2,
                                                                                                                           tempVariable);
                                                                             StringSymTabInfo falseLabel = parser.CreateLabel("False");
                                                                             StringSymTabInfo trueLabel  = parser.CreateLabel("True");
                                                                             StringSymTabInfo endLabel   = parser.CreateLabel("End");

                                                                             exp.setTrueLabel(trueLabel);
                                                                             exp.setFalseLabel(falseLabel);
                                                                             exp.setEndLabel(endLabel);
                                                                             //program.add(exp.ToThreeAddressCode());
                                                                             RESULT = exp;
                                                                         :}    
                          | exp:e1 NEQUAL  exp:e2                        {:

                                                                             Types resultType = Types.CHAR;
                                                                             if(e1.getExpressionType() == Types.INTEGER || e2.getExpressionType() == Types.INTEGER)
                                                                                 resultType = Types.INTEGER;


                                                                             VariableSymTabInfo tempVariable = parser.GenerateVariable(resultType);
                                                                             //scope.Insert(tempVariable);

                                                                             // Create ArithmeticExpression
                                                                             BooleanExpression exp = new BooleanExpression(resultType, 
                                                                                                                           OpCodes.A2NEQ, 
                                                                                                                           e1, e2,
                                                                                                                           tempVariable);
                                                                             StringSymTabInfo falseLabel = parser.CreateLabel("False");
                                                                             StringSymTabInfo trueLabel  = parser.CreateLabel("True");
                                                                             StringSymTabInfo endLabel   = parser.CreateLabel("End");

                                                                             exp.setTrueLabel(trueLabel);
                                                                             exp.setFalseLabel(falseLabel);
                                                                             exp.setEndLabel(endLabel);
                                                                             //program.add(exp.ToThreeAddressCode());
                                                                             RESULT = exp;
                                                                         :} 
                          ;                           
//As is customary, we assume that || and && are left-associative, and that || has lowest precedence, then &&, then ! .
exp                     ::= exp:e1 PLUS    exp:e2                        {:
                                                                             // If one of both operands is an Integer, the result is an integer.
                                                                             Types resultType = Types.CHAR;
                                                                             if(e1.getExpressionType() == Types.INTEGER || e2.getExpressionType() == Types.INTEGER)
                                                                                 resultType = Types.INTEGER;

                                                                             VariableSymTabInfo tempVariable = parser.GenerateVariable(resultType);
                                                                             //scope.Insert(tempVariable);

                                                                             // Create ArithmeticExpression
                                                                             BinaryArithmeticExpression exp = new BinaryArithmeticExpression(resultType,
                                                                                                                                 OpCodes.A2PLUS, 
                                                                                                                                 e1, e2,
                                                                                                                                 tempVariable);
                                                                             //program.add(exp.ToThreeAddressCode());
                                                                             RESULT = exp;
                                                                         :}  
						  | exp:e1 MINUS   exp:e2                        {:
                                                                             // If one of both operands is an Integer, the result is an integer.
                                                                             Types resultType = Types.CHAR;
                                                                             if(e1.getExpressionType() == Types.INTEGER || e2.getExpressionType() == Types.INTEGER)
                                                                                 resultType = Types.INTEGER;

                                                                             VariableSymTabInfo tempVariable = parser.GenerateVariable(resultType);
                                                                             //scope.Insert(tempVariable);

                                                                             // Create ArithmeticExpression
                                                                             BinaryArithmeticExpression exp = new BinaryArithmeticExpression(resultType,
                                                                                                                                 OpCodes.A2MINUS, 
                                                                                                                                 e1, e2,
                                                                                                                                 tempVariable);
                                                                             //program.add(exp.ToThreeAddressCode());
                                                                             RESULT = exp;;
                                                                         :} 
						  | exp:e1 TIMES   exp:e2                        {:
                                                                             // If one of both operands is an Integer, the result is an integer.
                                                                             Types resultType = Types.CHAR;
                                                                             if(e1.getExpressionType() == Types.INTEGER || e2.getExpressionType() == Types.INTEGER)
                                                                                 resultType = Types.INTEGER;

                                                                             VariableSymTabInfo tempVariable = parser.GenerateVariable(resultType);
                                                                             //scope.Insert(tempVariable);

                                                                             // Create ArithmeticExpression
                                                                             BinaryArithmeticExpression exp = new BinaryArithmeticExpression(resultType,
                                                                                                                                 OpCodes.A2TIMES, 
                                                                                                                                 e1, e2,
                                                                                                                                 tempVariable);
                                                                             //program.add(exp.ToThreeAddressCode());
                                                                             RESULT = exp;
                                                                         :} 
						  | exp:e1 DIVIDE  exp:e2                        {:
                                                                             // If one of both operands is an Integer, the result is an integer.
                                                                             Types resultType = Types.CHAR;
                                                                             if(e1.getExpressionType() == Types.INTEGER || e2.getExpressionType() == Types.INTEGER)
                                                                                 resultType = Types.INTEGER;

                                                                             VariableSymTabInfo tempVariable = parser.GenerateVariable(resultType);
                                                                             //scope.Insert(tempVariable);

                                                                             // Create ArithmeticExpression
                                                                             BinaryArithmeticExpression exp = new BinaryArithmeticExpression(resultType,
                                                                                                                                 OpCodes.A2DIV, 
                                                                                                                                 e1, e2,
                                                                                                                                 tempVariable);
                                                                             //program.add(exp.ToThreeAddressCode());
                                                                             RESULT = exp;
                                                                         :} 
						  | LPAR exp:e RPAR                              {:
                                                                             RESULT = e;
                                                                         :}
						  | MINUS exp:e                                  {:
                                                                             Types resultType = e.getExpressionType();
                                                                             // Change type for coercion
                                                                             if(resultType == Types.CHAR)
                                                                                 resultType = Types.INTEGER;

                                                                             VariableSymTabInfo tempVariable = parser.GenerateVariable(e.getExpressionType());
                                                                             // Create ArithmeticExpression
                                                                             UnaryArithmeticExpression exp = new UnaryArithmeticExpression(resultType,
                                                                                                                                 OpCodes.A1MINUS, 
                                                                                                                                 e,
                                                                                                                                 tempVariable);
                                                                             //program.add(exp.ToThreeAddressCode());
                                                                             RESULT = exp;
                                                                         :} 
                          | bexp:exp                                     {:
                                                                             RESULT = exp;                            
                                                                         :}
                            %prec UMINUS  
						  | NUMBER:n                                     {:

                                                                            ConstantTypeInfo ti = new ConstantTypeInfo(Types.INTEGER);
                                                                            IntegerSymTabInfo csti = new IntegerSymTabInfo(n.intValue());

                                                                            ConstantExpression ce = new ConstantExpression(csti, Types.INTEGER);
                                                                            RESULT = ce;
                                                                         :}
						  | CHAR:c                                       {:
						                                                    // Create char
						                                                    char theChar = c.charAt(0);
						                                                    int charValue = (int)theChar;
						                                                    ConstantTypeInfo ti = new ConstantTypeInfo(Types.CHAR);
						                                                    IntegerSymTabInfo csti = new IntegerSymTabInfo(charValue);
						                                                    ConstantExpression ce = new ConstantExpression(csti, Types.CHAR);
						                                                    RESULT = ce;
						                                                 :}                                                                         
						  | NAME:n LBRACK exp:idx RBRACK                {:
                                                                            // Arrays
                                                                            // Array Access
                                                                             ArraySymTabInfo array = scope.LookupArray(n);
                                                                            if(array == null)
                                                                            {
                                                                                String error = "Array '" + n + "'' is undefined";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            } 
                                                                            
                                                                            // Get Type of array here
                                                                            
                                                                            VariableSymTabInfo tempVariable = parser.GenerateVariable(array.typeInfo.ActualType());
                                                                            //scope.Insert(tempVariable);
                                                                            ArrayAccessExpression arrAcc = 
                                                                                new ArrayAccessExpression(tempVariable, array.typeInfo.ActualType(),  array, idx);
                                                                            
                                                                            RESULT = arrAcc;                                                                           
                                                                            
                                                                         :}   
						  | LENGTH NAME:n                                {:
                                                                             ArraySymTabInfo array = scope.LookupArray(n);
                                                                            if(array == null)
                                                                            {
                                                                                String error = "Length can not be called on variable " + n;
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            } 
						                                                    RESULT = ((ConstantExpression)array.getSize());
                                                                         :}                                                                                                                                                
						  | NAME:n LPAR pars:ps RPAR                     {:
                                                                        // Function Call
                                                                            // Add each TAC for each parameter to the result.
                                                                            //CodeContainer temp = new CodeContainer()

                                                                            // Get the SymTabInfo from the scope
                                                                            VariableSymTabInfo func = scope.LookupFunction(n);
                                                                            if(func == null)
                                                                            {
                                                                                String error = "Function '" + n + "' was not found.";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            }
                                                                            // Check all the types for the parameters
                                                                            ArrayList<SymTabInfo> expected = ((FunctionTypeInfo) func.typeInfo).getParameters();
                                                                            ArrayList<Expression> actualPm = ps.getParameterList();
                                                                            if(expected.size() != actualPm.size())
                                                                            {
                                                                                String error = "Function '" + n + "' is called with wrong number of arguments.";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                            }
                                                                            for(int i = 0; i < expected.size(); i++)
                                                                                if(!Typing.Typing.EqualOrBroaderType(actualPm.get(i).getExpressionType(), expected.get(i).typeInfo.ActualType()))
                                                                                {
                                                                                    String error = "Function '" + n + "' is called with wrong types (" + i + "!";
                                                                                    parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));
                                                                                }


                                                                            // We need the return type, so we get it from the SymTabInfo.
                                                                            FunctionTypeInfo funcTypeInfo = (FunctionTypeInfo) func.typeInfo;

                                                                            VariableSymTabInfo tempVariable = parser.GenerateVariable(funcTypeInfo.ActualType());
                                                                            //scope.Insert(tempVariable);

                                                                            FunctionCallExpression result = new FunctionCallExpression(tempVariable, funcTypeInfo.ActualType(), func, ps);
                                                                            // Create the TAC for the function call.
                                                                            //program.add(result.ToThreeAddressCode());
                                                                            RESULT = result;
                                                                         :}
						  | NAME:n                                       {:
                                                                             // Force n to be a variable
                                                                             VariableSymTabInfo v = scope.LookupVariable(n);
                                                                             if(v == null)
                                                                             {
                                                                                String error = "Variable '" + n + "' not found.";
                                                                                parser.report_fatal_error(error, ((java_cup.runtime.Symbol) CUP$parser$stack.peek()));

                                                                             }
                                                                             VariableExpression var = new VariableExpression(v, v.typeInfo.ActualType());
                                                                             RESULT = var;
                                                                         :}
						  ;

pars                    ::= exp:p                                        {:
                                                                            RESULT = new ParameterList(p);
                                                                         :}
						  | exp:p COMMA pars:ps                          {:
                                                                            // Force variable

                                                                            ParameterList result = new ParameterList(p);
                                                                            result.AddParameters(ps);
                                                                            RESULT = result;
                                                                         :}
						  | /* No parameters */
						  ;


