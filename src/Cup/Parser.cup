package Cup;

import Typing.ConstantTypeInfo;
import Typing.FunctionTypeInfo;
import SymbolTable.SymTabInfo;
import SymbolTable.SymbolTable;
import SymbolTable.IntegerSymTabInfo;
import SymbolTable.VariableSymTabInfo;
import SymbolTable.StringSymTabInfo;
import Typing.Types;
import Typing.VariableTypeInfo;
import CodeGeneration.CodeContainer;
import CodeGeneration.VarnameCreator;
import CodeGeneration.ThreeAddressCode;
import CodeGeneration.OpCodes;
import java.util.LinkedList;
import java.util.Arrays;


action code {:

  SymbolTable scope = new SymbolTable();
:}
   
parser code {:
	
	/* Change the method report_error so it will display the line and
	   column of where the error occurred in the input as well as the
	   reason for the error which is passed into the method in the
	   String 'message'. */
	public void report_error(String message, Object info) {
   
		/* Create a StringBuffer called 'm' with the string 'Error' in it. */
		StringBuffer m = new StringBuffer("Error");
   
		/* Check if the information passed to the method is the same
		   type as the type java_cup.runtime.Symbol. */
		if (info instanceof java_cup.runtime.Symbol) {
			/* Declare a java_cup.runtime.Symbol object 's' with the
			   information in the object info that is being typecasted
			   as a java_cup.runtime.Symbol object. */
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
			/* Check if the line number in the input is greater or
			   equal to zero. */
			if (s.left >= 0) {                
				/* Add to the end of the StringBuffer error message
				   the line number of the error in the input. */
				m.append(" in line "+(s.left+1));
				/* Check if the column number in the input is greater
				   or equal to zero. */
				if (s.right >= 0)                    
					/* Add to the end of the StringBuffer error message
					   the column number of the error in the input. */
					m.append(", column "+(s.right+1));
			}
		}
   
		/* Add to the end of the StringBuffer error message created in
		   this method the message that was passed into this method. */
		m.append(" : "+message);
   
		/* Print the contents of the StringBuffer 'm', which contains
		   an error message, out on a line. */
		System.err.println(m);
	}
   
	/* Change the method report_fatal_error so when it reports a fatal
	   error it will display the line and column number of where the
	   fatal error occurred in the input as well as the reason for the
	   fatal error which is passed into the method in the object
	   'message' and then exit.*/
	public void report_fatal_error(String message, Object info) {
		report_error(message, info);
		System.exit(1);
	}


	

:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal           CHAR;
terminal           NEQUAL, EQUAL, GREATER, LESS, NOT;
terminal           TIMES, MINUS, DIVIDE, PLUS;
terminal           WRITE, READ;
terminal           LENGTH;
terminal           WHILE, DO;
terminal           QCHAR;
terminal           EOL;
terminal           INT;
terminal           IF, ELSE;
terminal           LPAR, RPAR, LBRACE, RBRACE, LBRACK, RBRACK;
terminal           RETURN;
terminal           ASSIGN, SEMICOLON, COMMA, DOT;
terminal           LOW, UMINUS;



terminal Integer   NUMBER;
terminal String    NAME;


non terminal Object                    program, declaration, fun_declaration,
                                       var_declaration,
                                       var_declarations, pars;

non terminal CodeContainer             exp, statement, block;
non terminal LinkedList<CodeContainer> statements;

non terminal Types                     type;

non terminal SymTabInfo                formal_par, lexp;
non terminal LinkedList<SymTabInfo>    formal_pars, formal_params_non_empty;
non terminal Object                    total;

/* ------------ Precedence declarations ------------------------------------ */

precedence nonassoc LOW;
precedence nonassoc ELSE;
precedence left     GREATER, LESS, EQUAL, NEQUAL;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIVIDE;
precedence left     UMINUS;
precedence left     DOT, LBRACK;
/* ----------------------------Grammar Section------------------------------ */
// The total rule only serves as a rule so we can execute code at the EOF.
// Parsing the EOF token gave me some trouble so I skipped it and found this dirty solution.
// It works however, so I'm leaving it in pace. The codeblock can be used to print the
// symbol table for example after a succesful parse.

total                   ::=   program {: System.out.println("End of file");
                                         //scope.Print();
                                      :}
                          ;
program                 ::=   program declaration
						  | /* Empty */
						  ;


declaration             ::=  fun_declaration
						  |  var_declaration
						  ;

fun_declaration         ::=  type:rt NAME:n
                                                                         {: // Create symboltable entry
                                                                            VariableSymTabInfo vsti = new VariableSymTabInfo(null, n);
                                                                            // We insert it in the current scope but we update values later
                                                                            scope.Insert(vsti);
                                                                            scope = scope.NewScope();
                                                                            scope.function = vsti;
                                                                         :}
                             LPAR formal_pars:ps RPAR
                                                                         {:
                                                                            // Attach the parameters to the type
                                                                            // of the function defining the current scope
                                                                            scope.function.typeInfo = new FunctionTypeInfo(new VariableTypeInfo(rt), ps);
																		 :}
					         block:b
					                                                     {:
					                                                        //We close the scope and put it back as the parent.
                                                                            scope = scope.parent;
                                                                            b.PrintCode();
					                                                     :}
						   ;

formal_pars             ::=  formal_params_non_empty:ps                  {:
                                                                            RESULT = ps;
                                                                         :}
						  |
						  ;

formal_params_non_empty ::= formal_par:p COMMA formal_params_non_empty:ps     {:
                                                                                ps.addFirst(p);
                                                                                RESULT = ps;
                                                                              :}
                          | formal_par:p                                      {:
                                                                                RESULT = new LinkedList<SymTabInfo>(Arrays.asList(p));
                                                                              :}
                          ;

formal_par              ::= type:t NAME:n
                                                                         {:
                                                                            VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(t), n);
                                                                            // The current scope is the function itself,
                                                                            // So we add this parameter to the scope..
                                                                            scope.Insert(vsti);
                                                                            RESULT = vsti;
                                                                         :}
						  ;

block                   ::= LBRACE                                       {: // We open a new block so we create a new scope
                                                                            scope = scope.NewScope();
                                                                         :}
                            var_declarations statements:sts 
                            RBRACE                                       {:
                                                                            // We close the block so scope is closed.
                                                                            scope = scope.parent;
                                                                            // Create single code container to contain all code
                                                                            CodeContainer res = new CodeContainer();
                                                                            for(CodeContainer cc : sts)
                                                                                res.AppendCode(cc.codeList);
                                                                            
                                                                            RESULT = res;
                                                                         :}
						  ;

var_declaration         ::= type:t NAME:n SEMICOLON                      {: 

                                                                            VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(t), n);
                                                                            scope.Insert(vsti); 
                                                                         :}
						  ;

var_declarations        ::= var_declaration var_declarations
						  | /* Nothing */
						  ;

type                    ::= INT                                          {: /* We create a new TypeInfo that holds that the value is an integer
																			 * We then attach this type to the value of 'type'
																			 * INT and FLOAT are simple types
																			 * Arrays and structs are complex types..
																			 */ 
																			RESULT = Types.INTEGER;
																		 :}
						  | CHAR
                                                                         {:
                                                                             RESULT = Types.CHAR;
                                                                         :}
						  ;

statements                  ::= statement:st SEMICOLON statements:sts    {:
                                                                            // Append the statement to the statements
                                                                            LinkedList<CodeContainer> result = new LinkedList<CodeContainer>();
                                                                            result.addFirst(st);
                                                                            if(sts != null)
                                                                                result.addAll(sts);
                                                                            RESULT = result;
                                                                         :}
							  | /* Nothing */
							  ;

statement                   ::= IF LPAR exp:cond RPAR statement:cons        {:
                                                                             // Output
                                                                             CodeContainer result = new CodeContainer();
                                                                             // The variable that contains the value of the condition
                                                                             SymTabInfo resultVariable = cond.ResultVariable();
                                                                             // Create the true exit label
                                                                             String falseLabel = VarnameCreator.getInstance().CreateLabel();
                                                                             ConstantTypeInfo cti = new ConstantTypeInfo(Types.STRING);
                                                                             StringSymTabInfo falseLabelSymtabInfo = new StringSymTabInfo(cti, falseLabel);
                                                                             // Create the TAC that will check if the value is true
                                                                             // ifFalse <x> goto <falseLabel>
                                                                             // Arg2 = goto label if false
                                                                             ThreeAddressCode iftest = new ThreeAddressCode(OpCodes.IFFALSE,
                                                                                                                            resultVariable,
                                                                                                                            falseLabelSymtabInfo,
                                                                                                                            null);
                                                                             ThreeAddressCode falseTac = new ThreeAddressCode(OpCodes.LABEL, falseLabelSymtabInfo);
                                                                             result.AppendCode(cond.codeList);
                                                                             result.AppendCode(iftest);
                                                                             // We created the tac so we next we add the code to fallthrough
                                                                             result.AppendCode(cons.codeList);
                                                                             // Insert the false label
                                                                             result.AppendCode(falseTac);
                                                                             RESULT = result;                                                                           
                                                                         :}
								%prec LOW
							  | IF LPAR exp:cond RPAR block:cons ELSE block:alt  {:
                                                                             // Output
                                                                             CodeContainer result = new CodeContainer();
                                                                             // The variable that contains the value of the condition
                                                                             SymTabInfo resultVariable = cond.ResultVariable();
                                                                             // Create the false exit label
                                                                             String falseLabel = VarnameCreator.getInstance().CreateLabel();
                                                                             ConstantTypeInfo cti = new ConstantTypeInfo(Types.STRING);
                                                                             StringSymTabInfo falseLabelSymtabInfo = new StringSymTabInfo(cti, falseLabel);
                                                                             ThreeAddressCode falseTac = new ThreeAddressCode(OpCodes.LABEL, falseLabelSymtabInfo);

                                                                             // Create the true label exit
                                                                             String trueLabel = VarnameCreator.getInstance().CreateLabel();
                                                                             StringSymTabInfo trueLabelSymtabInfo = new StringSymTabInfo(cti, trueLabel);
                                                                             ThreeAddressCode trueTac = new ThreeAddressCode(OpCodes.LABEL, trueLabelSymtabInfo);

                                                                             // Create the true label exit
                                                                             String afterIfLabel = VarnameCreator.getInstance().CreateLabel();
                                                                             StringSymTabInfo afterIfSymtabInfo = new StringSymTabInfo(cti, afterIfLabel);
                                                                             ThreeAddressCode afterIfTac = new ThreeAddressCode(OpCodes.LABEL, afterIfSymtabInfo);

                                                                             // Create the TAC that will check if the value is true
                                                                             // ifFalse <x> goto <falseLabel>
                                                                             // Arg2 = goto label if false
                                                                             ThreeAddressCode iftest = new ThreeAddressCode(OpCodes.IFFALSE,
                                                                                                                            resultVariable,
                                                                                                                            falseLabelSymtabInfo,
                                                                                                                            null);

                                                                             // TAC to jump to after if, if we executed the consequent
                                                                             ThreeAddressCode jumpAfterIfTac = new ThreeAddressCode(OpCodes.GOTO, afterIfSymtabInfo);

                                                                             result.AppendCode(cond.codeList);
                                                                             result.AppendCode(iftest);
                                                                             // We created the tac so we next we add the code to fallthrough
                                                                             result.AppendCode(cons.codeList);
                                                                             result.AppendCode(jumpAfterIfTac);
                                                                             // Insert the false label
                                                                             result.AppendCode(falseTac);
                                                                             // Insert the alternative code
                                                                             result.AppendCode(alt.codeList);                                                                                     
                                                                             result.AppendCode(afterIfTac);

                                                                             RESULT = result;                                                                           
                                                                         :}
							  | WHILE LPAR exp RPAR statement
							  | lexp:tar ASSIGN exp:ex                   {:
                                                                             CodeContainer cc = new CodeContainer();
                                                                             cc.AppendCode(ex.codeList);
                                                                             // Create the 3AC for the assignment
                                                                             //Opcode, Arg1, Arg2, Result
                                                                             ThreeAddressCode tac = new ThreeAddressCode(OpCodes.A0, 
                                                                                                                         ex.symTabInfo,
                                                                                                                         null,
                                                                                                                         tar);
                                                                             cc.AppendCode(tac);
                                                                             RESULT = cc;
                                                                         :}
							  | RETURN exp
							  | block
							  | WRITE exp
							  | READ lexp
							  ;

lexp                    ::= NAME:n                                       {:
                                                                             // We should have already declared this name
                                                                             // so we simply look it up in the symbol table
                                                                             RESULT = scope.Lookup(n);
                                                                         :}
						  | lexp LBRACK exp RBRACK  // array access
						  ;
//As is customary, we assume that || and && are left-associative, and that || has lowest precedence, then &&, then ! .
exp                     ::= exp:e1 NEQUAL  exp:e2                        {:
                                                                             // Create a new variable name that will hold our value
                                                                             String varname = VarnameCreator.getInstance().CreateName();
                                                                             // For now we take the type of the first expression (no typecheck)
                                                                             Types newType = e1.symTabInfo.typeInfo.ActualType();   
                                                                             VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(newType), varname);

                                                                             scope.Insert(vsti);
                                                                             CodeContainer cc = new CodeContainer();
                                                                             // The place of the variable is the SymTabInfo we just created
                                                                             cc.symTabInfo = vsti;
                                                                             //Opcode, arg1, arg2, result 
                                                                             ThreeAddressCode tac = new ThreeAddressCode(OpCodes.A2NEQ,
                                                                                                                         e1.symTabInfo, e2.symTabInfo, vsti);

                                                                             cc.AppendCode(e1.codeList);
                                                                             cc.AppendCode(e2.codeList);
                                                                             cc.AppendCode(tac);
                                                                             RESULT = cc;
                                                                         :}  
						  | exp:e1 EQUAL   exp:e2                        {:
                                                                             // Create a new variable name that will hold our value
                                                                             String varname = VarnameCreator.getInstance().CreateName();
                                                                             // For now we take the type of the first expression (no typecheck)
                                                                             Types newType = e1.symTabInfo.typeInfo.ActualType();   
                                                                             VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(newType), varname);

                                                                             scope.Insert(vsti);
                                                                             CodeContainer cc = new CodeContainer();
                                                                             // The place of the variable is the SymTabInfo we just created
                                                                             cc.symTabInfo = vsti;
                                                                             //Opcode, arg1, arg2, result 
                                                                             ThreeAddressCode tac = new ThreeAddressCode(OpCodes.A2EQ,
                                                                                                                         e1.symTabInfo, e2.symTabInfo, vsti);

                                                                             cc.AppendCode(e1.codeList);
                                                                             cc.AppendCode(e2.codeList);
                                                                             cc.AppendCode(tac);
                                                                             RESULT = cc;
                                                                         :}   
						  | exp:e1 GREATER exp:e2                        {:
                                                                             // Create a new variable name that will hold our value
                                                                             String varname = VarnameCreator.getInstance().CreateName();
                                                                             // For now we take the type of the first expression (no typecheck)
                                                                             Types newType = e1.symTabInfo.typeInfo.ActualType();   
                                                                             VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(newType), varname);

                                                                             scope.Insert(vsti);
                                                                             CodeContainer cc = new CodeContainer();
                                                                             // The place of the variable is the SymTabInfo we just created
                                                                             cc.symTabInfo = vsti;
                                                                             //Opcode, arg1, arg2, result 
                                                                             ThreeAddressCode tac = new ThreeAddressCode(OpCodes.A2GT,
                                                                                                                         e1.symTabInfo, e2.symTabInfo, vsti);

                                                                             cc.AppendCode(e1.codeList);
                                                                             cc.AppendCode(e2.codeList);
                                                                             cc.AppendCode(tac);
                                                                             RESULT = cc;
                                                                         :}  
						  | exp:e1 LESS    exp:e2                        {:
                                                                             // Create a new variable name that will hold our value
                                                                             String varname = VarnameCreator.getInstance().CreateName();
                                                                             // For now we take the type of the first expression (no typecheck)
                                                                             Types newType = e1.symTabInfo.typeInfo.ActualType();   
                                                                             VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(newType), varname);

                                                                             scope.Insert(vsti);
                                                                             CodeContainer cc = new CodeContainer();
                                                                             // The place of the variable is the SymTabInfo we just created
                                                                             cc.symTabInfo = vsti;
                                                                             //Opcode, arg1, arg2, result 
                                                                             ThreeAddressCode tac = new ThreeAddressCode(OpCodes.A2LT,
                                                                                                                         e1.symTabInfo, e2.symTabInfo, vsti);

                                                                             cc.AppendCode(e1.codeList);
                                                                             cc.AppendCode(e2.codeList);
                                                                             cc.AppendCode(tac);
                                                                             RESULT = cc;
                                                                         :}   
						  | exp:e1 PLUS    exp:e2                        {:
                                                                             // Create a new variable name that will hold our minus value
                                                                             String varname = VarnameCreator.getInstance().CreateName();
                                                                             // For now we take the type of the first expression (no typecheck)
                                                                             Types newType = e1.symTabInfo.typeInfo.ActualType();   
                                                                             VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(newType), varname);

                                                                             scope.Insert(vsti);
                                                                             CodeContainer cc = new CodeContainer();
                                                                             // The place of the variable is the SymTabInfo we just created
                                                                             cc.symTabInfo = vsti;
                                                                             //Opcode, arg1, arg2, result 
                                                                             ThreeAddressCode tac = new ThreeAddressCode(OpCodes.A2PLUS,
                                                                                                                         e1.symTabInfo, e2.symTabInfo, vsti);

                                                                             cc.AppendCode(e1.codeList);
                                                                             cc.AppendCode(e2.codeList);
                                                                             cc.AppendCode(tac);
                                                                             RESULT = cc;
                                                                         :}  
						  | exp:e1 MINUS   exp:e2                        {:
                                                                             // Create a new variable name that will hold our minus value
                                                                             String varname = VarnameCreator.getInstance().CreateName();
                                                                             // For now we take the type of the first expression (no typecheck)
                                                                             Types newType = e1.symTabInfo.typeInfo.ActualType();   
                                                                             VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(newType), varname);

                                                                             scope.Insert(vsti);
                                                                             CodeContainer cc = new CodeContainer();
                                                                             // The place of the variable is the SymTabInfo we just created
                                                                             cc.symTabInfo = vsti;
                                                                             //Opcode, arg1, arg2, result 
                                                                             ThreeAddressCode tac = new ThreeAddressCode(OpCodes.A2MINUS,
                                                                                                                         e1.symTabInfo, e2.symTabInfo, vsti);

                                                                             cc.AppendCode(e1.codeList);
                                                                             cc.AppendCode(e2.codeList);
                                                                             cc.AppendCode(tac);
                                                                             RESULT = cc;
                                                                         :} 
						  | exp:e1 TIMES   exp:e2                        {:
                                                                             // Create a new variable name that will hold our minus value
                                                                             String varname = VarnameCreator.getInstance().CreateName();
                                                                             // For now we take the type of the first expression (no typecheck)
                                                                             Types newType = e1.symTabInfo.typeInfo.ActualType();   
                                                                             VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(newType), varname);

                                                                             scope.Insert(vsti);
                                                                             CodeContainer cc = new CodeContainer();
                                                                             // The place of the variable is the SymTabInfo we just created
                                                                             cc.symTabInfo = vsti;
                                                                             //Opcode, arg1, arg2, result 
                                                                             ThreeAddressCode tac = new ThreeAddressCode(OpCodes.A2TIMES,
                                                                                                                         e1.symTabInfo, e2.symTabInfo, vsti);

                                                                             cc.AppendCode(e1.codeList);
                                                                             cc.AppendCode(e2.codeList);
                                                                             cc.AppendCode(tac);
                                                                             RESULT = cc;
                                                                         :} 
						  | exp:e1 DIVIDE  exp:e2                        {:
                                                                             // Create a new variable name that will hold our minus value
                                                                             String varname = VarnameCreator.getInstance().CreateName();
                                                                             // For now we take the type of the first expression (no typecheck)
                                                                             Types newType = e1.symTabInfo.typeInfo.ActualType();   
                                                                             VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(newType), varname);

                                                                             scope.Insert(vsti);
                                                                             CodeContainer cc = new CodeContainer();
                                                                             // The place of the variable is the SymTabInfo we just created
                                                                             cc.symTabInfo = vsti;
                                                                             //Opcode, arg1, arg2, result 
                                                                             ThreeAddressCode tac = new ThreeAddressCode(OpCodes.A2DIV,
                                                                                                                         e1.symTabInfo, e2.symTabInfo, vsti);

                                                                             cc.AppendCode(e1.codeList);
                                                                             cc.AppendCode(e2.codeList);
                                                                             cc.AppendCode(tac);
                                                                             RESULT = cc;
                                                                         :} 
						  | LPAR exp:e RPAR                              {:
                                                                             RESULT = e;
                                                                         :}
						  | exp LBRACK exp RBRACK                        {:
                                                                            // Function Call
                                                                            
                                                                         :}
						  | MINUS exp:e                                  {:
                                                                             // Create a new variable name that will hold our minus value
                                                                             String varname = VarnameCreator.getInstance().CreateName();

                                                                             // The type is the result of the type of e.
                                                                             // So we get that type
                                                                             Types newType = e.symTabInfo.typeInfo.ActualType();   
                                                                             VariableSymTabInfo vsti = new VariableSymTabInfo(new VariableTypeInfo(newType), varname);

                                                                             scope.Insert(vsti);
                                                                             CodeContainer cc = new CodeContainer();
                                                                             // The place of the variable is the SymTabInfo we just created
                                                                             cc.symTabInfo = vsti;
                                                                             //Opcode, arg1, arg2, result 
                                                                             ThreeAddressCode tac = new ThreeAddressCode(OpCodes.A1MINUS,
                                                                                                                         e.symTabInfo, null, vsti);

                                                                             cc.codeList = e.codeList;
                                                                             cc.AppendCode(tac);
                                                                             RESULT = cc;
                                                                         :}
                            %prec UMINUS  
						  | NUMBER:n                                     {:
                                                                            //TODO Can't I make the IntegerSymTabInfo constructor
                                                                            // create the proper type? It's always going to be integer..
                                                                            ConstantTypeInfo ti = new ConstantTypeInfo(Types.INTEGER);
                                                                            IntegerSymTabInfo csti = new IntegerSymTabInfo(ti, n.intValue());
                                                                            RESULT = new CodeContainer(csti); 
                                                                         :}
						  | NAME LPAR pars RPAR
						  | QCHAR
						  | NAME:n                                       {:
                                                                             
                                                                             RESULT = new CodeContainer(scope.Lookup(n));
                                                                         :}
						  ;

pars                    ::= exp
						  | exp COMMA pars
						  | /* No parameters */
						  ;


