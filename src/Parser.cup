import java_cup.runtime.*;
   
parser code {:
    
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};
   

   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  

   Terminals that have no value are listed first and then terminals
   that do have an value, in this case an integer value, are listed on
   the next line down. */
terminal           CHAR;
terminal           NEQUAL, EQUAL, GREATER, LESS, NOT;
terminal           TIMES, MINUS, DIVIDE, PLUS;
terminal           WRITE, READ;
terminal           LENGTH;
terminal           WHILE, DO;
terminal           QCHAR;
terminal           EOL;
terminal           INT;
terminal           IF, ELSE;
terminal           LPAR, RPAR, LBRACE, RBRACE, LBRACK, RBRACK;
terminal           RETURN;
terminal           ASSIGN, SEMICOLON, COMMA, DOT;
terminal           LOW, UMINUS;

terminal Integer   NUMBER;
terminal String    NAME;


non terminal Object program, declaration, fun_declaration, formal_pars,
                    formal_params_non_empty, formal_par, block, var_declaration,
                    var_declarations, type, statements, statement, lexp, exp, pars;

/* ------------ Precedence declarations ------------------------------------ */

precedence nonassoc LOW;
precedence nonassoc ELSE;
precedence left     GREATER, LESS, EQUAL, NEQUAL;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIVIDE;
precedence left     UMINUS;
precedence left     DOT, LBRACK;
/* ----------------------------Grammar Section------------------------------ */

program                 ::=   program declaration
                          | /* Empty */
                          ;


declaration             ::=  fun_declaration
                          |  var_declaration
                          ;

fun_declaration	        ::=  type NAME LPAR formal_pars RPAR block
						  ;

formal_pars			    ::=  formal_params_non_empty
                          |
                          ;

formal_params_non_empty	::= formal_par COMMA formal_params_non_empty
						  | formal_par
						  ;

formal_par				::= type NAME
						  ;

block				    ::= LBRACE var_declarations statements RBRACE
						  ;

var_declaration		    ::= type NAME SEMICOLON {: System.out.println("Found a name!"); :}
						  ;

var_declarations	    ::= var_declaration var_declarations
						  | /* Nothing */
						  ;

type					::= INT
						  | CHAR
						  ;

statements				::= statement SEMICOLON statements
						  | /* Nothing */
						  ;

statement			    ::= IF LPAR exp RPAR statement
                            %prec LOW
						  | IF LPAR exp RPAR statement ELSE statement
                          | WHILE LPAR exp RPAR statement
                          | lexp ASSIGN exp
                          | RETURN exp
                          | block
                          | WRITE exp
                          | READ lexp
                          | lexp
                          ;

lexp					::= NAME
						  | lexp LBRACK exp RBRACK	// array access
						  ;

exp						::= exp PLUS exp
						  | exp GREATER exp
						  | exp LESS exp
						  | exp EQUAL exp
						  | exp NEQUAL exp
						  | exp MINUS exp
						  | exp TIMES exp
						  | exp DIVIDE exp
						  | LPAR exp RPAR
						  | exp LBRACK exp RBRACK
						  | MINUS exp
						    %prec UMINUS
						  | NUMBER
						  | NAME LPAR pars RPAR
						  | QCHAR
						  | NAME
						  ;

pars					::= exp
						  | exp COMMA pars
						  | /* No parameters */
						  ;