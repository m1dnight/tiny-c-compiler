package MyGCC;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.util.ArrayList;
import java.util.Map.Entry;
import MyGCC.Parameter;

parser code {:

  public static Parser p;
  public PrintStream ps;
  public static Boolean DEBUG = false;
  public static RegisterManager regMan = new RegisterManager();
  public CodeGenerator cg = new CodeGenerator();
  public static ArrayList<String> errors = new ArrayList<String>();

  Parser(Scanner s, SymbolFactory sf, PrintStream ps){
    super(s,sf);
    this.ps = ps;
  }

  public static void main(String args[]) throws Exception {
    SymbolFactory sf = new DefaultSymbolFactory();
    String destination_file;
    ArrayList<String> scanErrors;
    

    if (args.length >= 2)
      destination_file = args[1];
    else
      destination_file = args[0].substring(0,args[0].lastIndexOf('.')) + ".s";

    p = new Parser(new Scanner(new FileInputStream(args[0]),sf),
                               sf,
                               new PrintStream(destination_file));
  
    // This line is here in order to ensure that the readint function can work
    p.cg.sm.addString("\"%d\"");

    p.parse();
    Scanner sc = (Scanner)p.getScanner();
    scanErrors = sc.getErrors();

    for(String err : scanErrors)
      System.err.println("\t" + args[0] + err);

    for(String err : Parser.errors)
      System.err.println("\t" + args[0] + err);
    
    if(scanErrors.size() == 0 && Parser.errors.size() == 0){
      StringBuilder sb = new StringBuilder();
      HashMap<String, String> contents = p.cg.sm.getContents();
      System.out.println("\n\t>> Generating code: " + args[0]);
      sb.append("\t.file \"" + args[0] + "\"\n\t.section\t.rodata\n");
      
      GlobalContext globalContext = p.cg.getGlobalContext();
      sb.append(globalContext.makeLabels());
        
      for(String e : contents.keySet())
        sb.append(contents.get(e) + ":\n\t.string\t" + e + "\n");
        
      sb.append("\t.text\n");
      sb.append(p.cg.generateCode());
      if (Parser.errors.size() != 0) {
        for(String err : Parser.errors)
      System.err.println("\t" + args[0] + err);
        System.out.println("\n\t>> Code generation aborted.\n");
        return;
      }
      p.ps.print(sb.toString());
      p.ps.close();
      System.out.println("\t>> Generation completed.");
    }
    else
      System.out.println("\n\t>> Code generation aborted.\n");
  }
  
  //Inspired by:
  //http://jflex.sourcearchive.com/documentation/1.4.2/classJFlex_1_1LexScan_a5d95c1908b6d04dd694909745750e68f.html#a5d95c1908b6d04dd694909745750e68f
  public String getTokenName(Symbol token){
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token.sym) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }
    
    return "UNKNOWN TOKEN";
  }
  

  public void syntax_error(Symbol cur_token) { //overrides the default method
    Scanner s = (Scanner) this.getScanner();
    Parser.errors.add(":" + s.yyline() + ":" + s.yycolumn()
     + ": error: expected \";\" before " + getTokenName(cur_token) + " token.");
  }
:}

terminal INT, VOID, LHOOK, RHOOK, LPAREN, RPAREN, LBRACKET, RBRACKET,
         COMMA, SEMI, EQL, EXIT, RETURN, READ_INT, PRINTF, IF, ELSE, WHILE,
         MINUS, NOT, LESS, GREATER, EQUALS, LEQL, GEQL, DIFF, PLUS, TIMES, DIV,
         MOD, OR, AND;
    
terminal String IDENT;
terminal String STATIC;
terminal String STRING;
terminal Integer NB_INT;

non terminal program, declarations_list, declaration, prototype,
             functions_list, function, header,
             body, instruct_list,
             args_list, dec_func_list, dec_end, proto_func,
             hybrid_param, dec_or_func_end, arr, arr_proto, if_else, if_end,
             while_end;

non terminal Parameter parameter;
non terminal Type type;
non terminal ArrayList<Type> types_list, types_sequence;
non terminal ArrayList<Entry<Type,String>> param_list, param_sequence;
non terminal OperationType bin_op;
non terminal Expression expression;
non terminal Instruction instruction;
non terminal ArrayList<Expression> arg_sequence;


precedence left OR, AND;
precedence left PLUS, MINUS;
precedence left TIMES, DIV, MOD;
precedence nonassoc EQUALS, DIFF, GREATER, LESS, LEQL, GEQL, NOT;

// A program is a list of declarations and functions
program ::= dec_func_list;

// Defines the structure of declarations and functions
dec_func_list ::=

    // Format for the declaration of a static variable, each declaration is
    // separated by a semicolon
    STATIC:s type:t IDENT:id arr SEMI
      {:  if(Parser.DEBUG) System.out.println("Type : static " + t);
          parser.cg.pushInformation(new ParsingResult<Type>(ResultType.TYPE, t));
          if(Parser.DEBUG) System.out.println("Identifier : " + id);
          parser.cg.pushInformation(new ParsingResult<String>(ResultType.ID, id));
          parser.cg.pushInformation(new ParsingResult<String>(ResultType.QUALIFIER, s));
					parser.cg.declareVariable();
      :}
      dec_func_list
    
    // Format for the declaration of a non-static variable, or a prototype
  | type:t IDENT:id
      {:
        if(Parser.DEBUG) System.out.println("Type : " + t);
        parser.cg.pushInformation(new ParsingResult<Type>(ResultType.TYPE, t));
        if(Parser.DEBUG) System.out.println("Identifier : " + id);
        parser.cg.pushInformation(new ParsingResult<String>(ResultType.ID, id));
      :}
    dec_end
  
    // Format for the prototype of a function with void return type
  | VOID IDENT proto_func
  ;
        
// End of the declaration a non-static variable or of a function's prototype
dec_end ::=
    arr
      {:  parser.cg.declareVariable(); :}
    SEMI dec_func_list
  | proto_func
  ;
       
       
arr ::=
    // A declaration or a prototype may contain an Array.
    // Therefore it wile be of the form [NUM]
    LHOOK NB_INT:n RHOOK
      {:
        if(Parser.DEBUG) System.out.println("Array size : " + n);
        parser.cg.pushInformation(new ParsingResult<Integer>(ResultType.VARIABLE, n));
      :}
    // It may also be empty
  |                     
  ;
   
// Beginning of the parameters of a function's prototype
proto_func ::=
    LPAREN hybrid_param
  ;
      
// Format of the parameters of a function or prototype
hybrid_param ::=

    // A list of types ending with a semicolon, another declaration or
    // a function may follow
    types_list RPAREN SEMI
      {:
        parser.cg.declarePrototype();
      :}
    dec_func_list
    
    // List of the arguments for a function.
    // a function ends with a }
  | param_list RPAREN LBRACKET
      {:
        Scanner s = (Scanner)Parser.p.getScanner();
        parser.cg.checkFunction(parser.cg.getIdentifierOnStack(), s.yyline(), s.yycolumn());
        parser.cg.startFunctionDefinition();
      :}
    body RBRACKET
      {:
        parser.cg.closeFunction();
      :}
    functions_list
  
    // The function may require no parameters, a declaration or function
    // may ensue
  | VOID RPAREN dec_or_func_end
  ;

// Describes the end of a Declaration or a Function
dec_or_func_end ::=

    // All declarations end with a semicolon, and may be
    // followed by either a function of a declarion
    SEMI
    {:
      parser.cg.declarePrototype();
    :}
    dec_func_list
    
    // If we have a function, it will be ended by { code }
    // And followed by a list of functions
  | LBRACKET
      {:
        Scanner s = (Scanner)Parser.p.getScanner();
        parser.cg.checkFunction(parser.cg.getIdentifierOnStack(), s.yyline(), s.yycolumn());
        parser.cg.startFunctionDefinition();
      :}
    body RBRACKET functions_list
  ;

// Defines the constraints of a list of declarations
declarations_list ::=

    // All declarations are separated by a semicolon
    declaration SEMI declarations_list
  |
  ;
  
// Declaration of either a variable the prototype of a function.
declaration ::=

    // A declaration must contain a type (int, float, void, ect...)
    // an identifier (name of the variable of function)
    // and either an array, or the rest of a function's prototype

    type:t IDENT:id
      {:
        if(Parser.DEBUG) System.out.println("Push type : " + t);
        parser.cg.pushInformation(new ParsingResult<Type>(ResultType.TYPE, t));
        if(Parser.DEBUG) System.out.println("Push Identifier : " + id);
        parser.cg.pushInformation(new ParsingResult<String>(ResultType.ID, id));
      :}
    arr_proto
    
    // A variable may be declared as static
  | STATIC:s type:t IDENT:id arr
		  {:  if(Parser.DEBUG) System.out.println("Type : static " + t);
          parser.cg.pushInformation(new ParsingResult<Type>(ResultType.TYPE, t));
          if(Parser.DEBUG) System.out.println("Identifier : " + id);
          parser.cg.pushInformation(new ParsingResult<String>(ResultType.ID, id));
          parser.cg.pushInformation(new ParsingResult<String>(ResultType.QUALIFIER, s));
					parser.cg.declareVariable();
      :}
  
    // a function may be have a VOID return type
  | VOID IDENT prototype
  ;
      
// Determines if we are dealing with the declaration of a variable
// or a prototype and reduces accordingly
arr_proto ::=
    arr
      {:
        parser.cg.declareVariable();
      :}
  | prototype
      {:
        parser.cg.declarePrototype();
      :}
  ;
      
// Definition of the part of a function's prototype that differs from
// the declaration of a variable
prototype ::=

    // Represent the types of the arguments the function will take
    LPAREN types_sequence RPAREN
  ;


type ::=
    INT
      {:
        RESULT = Type.INT;
      :}
  ;
    
// A sequence of types for the prototype of a function
types_sequence ::=

    // A function may require no arguments, type is VOID
    VOID
    
    // If the function requires arguments, it will be a types_list
  | types_list
  ;


// Used for defining the types required for the arguments of a function
types_list ::=
    type:t arr
      {:
        parser.cg.pushInformation(new ParsingResult<Type>(ResultType.PARAMETER, t));
      :}
    
    // each variable type is separated by a comma
  | type:t arr
      {: 
        parser.cg.pushInformation(new ParsingResult<Type>(ResultType.PARAMETER, t));
      :}
      COMMA types_list
  ;
      
// List of functions. It may be empty
functions_list ::=
    function functions_list
  |
  ;
        
// Core structure of a function in C
function ::=
    header LBRACKET
      {:
        Scanner s = (Scanner)Parser.p.getScanner();
        parser.cg.checkFunction(parser.cg.getIdentifierOnStack(), s.yyline(), s.yycolumn());
        parser.cg.startFunctionDefinition();
      :}
    body RBRACKET
  ;

header ::=
    type:t IDENT:i
      {:
        parser.cg.pushInformation(new ParsingResult<Type>(ResultType.TYPE, t));
        parser.cg.pushInformation(new ParsingResult<String>(ResultType.ID, i)); 
      :} 
    LPAREN param_sequence RPAREN
  ;

// Determines whether the function requires any arguments
param_sequence ::=
    
    // The function requires no arguments
    VOID
    
    // The function requires at least one argument
  | param_list
  ;

// A list of parameters, each separated by a comma.
param_list ::=

    // a param_list may contain a single parameter
    parameter:p
      {:
        parser.cg.pushInformation(new ParsingResult<Parameter>(ResultType.PARAMETER, p));
      :}
  | parameter:p
      {:
        parser.cg.pushInformation(new ParsingResult<Parameter>(ResultType.PARAMETER, p));
      :}
      COMMA param_list
  ;
      
// A parameter MUST be a variable
parameter ::=

    type:t IDENT:id
      {:
        RESULT = new Parameter(t, id, 0);
      :}
    
    // The variable can be an array
  | type:t IDENT:id LHOOK NB_INT:n RHOOK
  //| type:t IDENT:id LHOOK RHOOK
      {:
        RESULT = new Parameter(t, id, n);
      :}
  ;
     
// The body of a function is composed of declarations and instructions
body ::=
    declarations_list instruct_list
  ;

// A list of instructions, each separated by semicolons
instruct_list ::=
    instruction SEMI instruct_list
  | error SEMI instruct_list
  |
  ;
        
// Every instruction which can be performed
instruction ::=
    
    // Compare the value of a variable with that of an expression
    IDENT:i EQL expression:e
      {:
        if(Parser.DEBUG) System.out.println("Instruction detected: EQL");
        Scanner s = (Scanner)Parser.p.getScanner();
        parser.cg.checkValidity(i, s.yyline(), s.yycolumn());
        parser.cg.pushInstruction(new Instruction(new Variable<String>(null, i), e, InstructionType.EQL));
      :}
    
    // Compare the value of an item from an array with that of an expression
    // The index may be obtained with an expression
  | IDENT:id LHOOK expression:e1 RHOOK EQL expression:e2
      {:
        if(Parser.DEBUG) System.out.println("Detected affectation to Array");
        parser.cg.pushInstruction(new Instruction(new Variable<String>(null, id, e1), e2, InstructionType.EQL));
      :}
  
    // Exit with status NB_INT
  | EXIT LPAREN NB_INT:n RPAREN
      {:
        ArrayList<Expression> arg = new ArrayList<Expression>();
        arg.add(new Variable<Integer>(null, n));
        parser.cg.pushInstruction(new Instruction(new FunctionCall(InstructionType.EXIT.toString(), arg), InstructionType.EXIT));
      :}
      //TODO fix: constructor takes Expression as 1st argument, not Integer.
  
    // Return the value of an expression
  | RETURN expression:e
      {:
        if(Parser.DEBUG) System.out.println("Push instruction : RETURN exp");
        parser.cg.pushInstruction(new Instruction(e, InstructionType.RETURN));
      :}
  
    // Return no value
  | RETURN 
      {:
        if(Parser.DEBUG) System.out.println("Push instruction: RETURN");
        parser.cg.pushInstruction(new Instruction(null, InstructionType.RETURN));
      :}
  
    // Scanf(int)
  | READ_INT LPAREN IDENT:i RPAREN
      {:
        ArrayList<Expression> ident = new ArrayList<Expression>();
        ident.add(new Variable<String>(null, i));
        parser.cg.pushInstruction(new Instruction(new FunctionCall(InstructionType.READ_INT.toString(), ident), InstructionType.READ_INT));
      :}
    
    // Basic Printf instruction
  | PRINTF LPAREN STRING:s COMMA arg_sequence:a RPAREN
      {:
          a.add(0, new Variable<String>(null, s));
          String label = parser.cg.sm.addString(s);
          parser.cg.pushInstruction(new Instruction(new FunctionCall(InstructionType.PRINTF.toString(), a), InstructionType.PRINTF));
      :}
  
    // Basic "if else" test on an expression
  | IF
      {:
        if(Parser.DEBUG) System.out.println("If detected");
        //System.out.println("body is : " + parser.cg.getCurrentBlock());
      :}
    LPAREN expression:e RPAREN
      {:
        parser.cg.startBlockDefinition();
      :}
    if_end:ie
      {:
        if(ie != null) {
          parser.cg.closeBlockDefinition();
          parser.cg.pushInstruction(new LogicalIfElse(e, InstructionType.IF, ((Block)ie).parent, (Block)ie));
        } else {
          Block cb = parser.cg.getCurrentBlock();
          parser.cg.closeBlockDefinition();
          parser.cg.pushInstruction(new LogicalIfElse(e, InstructionType.IF, cb, null));
        }
        if(Parser.DEBUG) System.out.println("If reduced");
      :}
  
    // Basic "while" instruction
  | WHILE
      {:
        if(Parser.DEBUG) System.out.println("While Detected");
      :}
    LPAREN expression:e RPAREN 
      {:
        parser.cg.startBlockDefinition();
      :}
    while_end
      {:
        Block cb = parser.cg.getCurrentBlock();
        parser.cg.closeBlockDefinition();
        parser.cg.pushInstruction(new LogicalBlock(e, InstructionType.WHILE, cb));
      :}
  
  | expression:e
      {:
        if(Parser.DEBUG) System.out.println("Instruction detected: exp");
        parser.cg.pushInstruction(new Instruction(e, null));
      :}
  ;
  
while_end ::=
    LBRACKET instruct_list RBRACKET    
  | instruction:i SEMI
  ;

if_end ::=
    LBRACKET instruct_list RBRACKET if_else:ie
      {:
        RESULT = ie;
      :}
  | instruction SEMI if_else:ie
      {:
        RESULT = ie;
      :}
  ;
  
if_else ::=
    ELSE
      {:
        parser.cg.startBlockDefinition();
      :}
    LBRACKET instruct_list RBRACKET
      {:
        Block cb = parser.cg.getCurrentBlock();
        parser.cg.closeBlockDefinition();
        RESULT = cb;
      :}
      
  | ELSE
      {:
        parser.cg.startBlockDefinition();
      :}
    instruction:i SEMI
      {:
        Block cb = parser.cg.getCurrentBlock();
        parser.cg.closeBlockDefinition();
        RESULT = cb;
      :}
  |
    {:
      RESULT = null;
    :}
  ;
    
// Defines the list of possible expressions to be used
expression ::=
    expression:left bin_op:op expression:right
      {:
        if(Parser.DEBUG) System.out.println("Expression operator: " + op);
        RESULT = new Expression(op, left, right);
      :}

  | MINUS expression:e
      {:
        if(Parser.DEBUG) System.out.println("Negating expression");
        e.flag = Flag.UMINUS;
        RESULT = e;
      :}
  
  | NOT expression:e
      {:
        if(Parser.DEBUG) System.out.println("NOT expression");
        e.flag = Flag.NOT;
        RESULT = e;
      :}
  
  | LPAREN expression:e RPAREN
      {:
        e.priority = true;
        RESULT = e;
      :}

  | IDENT:i
      {:
        if(Parser.DEBUG) System.out.println("Expression ident: " + i);
        //use of ident in current block
        Scanner s = (Scanner)Parser.p.getScanner();
        parser.cg.checkValidity(i, s.yyline(), s.yycolumn());
        RESULT = new Variable<String>(null, i);
      :}

  | NB_INT:n
      {:
        if(Parser.DEBUG) System.out.println("Expression: " + n);
        RESULT = new Variable<Integer>(null, n);
      :}

    // Allows the use of a function in an expression
  | IDENT:i LPAREN arg_sequence:a RPAREN
      {:
        Scanner s = (Scanner)Parser.p.getScanner();
        parser.cg.checkFunction(i, s.yyline(), s.yycolumn());
        RESULT = new FunctionCall(i, a);
      :}
  
    // Allows the use of arrays with expression calculated indexes
  | IDENT:i LHOOK expression:e RHOOK
      {:
        RESULT = new Variable<String>(null, i, e);
      :}
  ;
  
// Can be either empty, or a list of arguments
arg_sequence ::= 
    args_list
      {:
        RESULT = parser.cg.getArguments();
      :}
  |
      {:
        RESULT = parser.cg.getArguments();
      :}
  ;
        
// A list of expressions, each seperated by a comma
// An args_list may not be empty
args_list ::=
    expression:e1
      {:
        parser.cg.pushArgument(e1);
      :}
  | expression:e2 
      {:
        parser.cg.pushArgument(e2);
      :}
    COMMA args_list
  ;
     
// List of accepted binary operators
bin_op ::=
    LESS
      {: RESULT = OperationType.LESS; :}
  | GREATER
      {: RESULT = OperationType.GREATER; :}
  | EQUALS
      {: RESULT = OperationType.EQUALS; :}
  | LEQL
      {: RESULT = OperationType.LEQL; :}
  | GEQL
      {: RESULT = OperationType.GEQL; :}
  | DIFF
      {: RESULT = OperationType.DIFF; :}
  | PLUS
      {: RESULT = OperationType.ADD; :}
  | MINUS
      {: RESULT = OperationType.SUB; :}
  | TIMES
      {: RESULT = OperationType.IMUL; :}
  | DIV
      {: RESULT = OperationType.IDIV; :}
  | MOD
      {: RESULT = OperationType.MOD; :}  
  | OR
      {: RESULT = OperationType.OR; :}
  | AND
      {: RESULT = OperationType.AND; :}
  ;
     
