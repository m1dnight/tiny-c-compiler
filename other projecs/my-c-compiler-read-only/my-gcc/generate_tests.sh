#!/bin/bash
# Script written to generate a compiling and execution sequence for our project
# providing automated compilation, and .h file generation for testing.


# Clean up the files we are going to generate
if [ -e seperate_tests.sh ]
then
  rm seperate_tests.sh
fi

if [ -e tests/batterie_test.h ]
then
  rm tests/batterie_test.h
fi		

if [ ! -e tests/singular_tests/asm ]		
	then		
  mkdir tests/singular_tests/asm		
fi		

touch seperate_tests.sh
touch tests/batterie_test.h

# The three subdirectories we are going to be using
PATH_1="tests/"
PATH_2=$PATH_1"singular_tests/"
PATH_3=$PATH_2"asm/"

# Set the stage for compiling our project and defining what we will be compiling with
echo "#!/bin/bash" >> seperate_tests.sh
echo "ant clean" >> seperate_tests.sh
echo "ant" >> seperate_tests.sh
echo >> seperate_tests.sh
echo "OUR_COMPILER=\"java -jar jar/Compiler.jar\"" >> seperate_tests.sh
echo >> seperate_tests.sh
echo "rm -f full" >> seperate_tests.sh
echo >> seperate_tests.sh
echo "#ifndef BATTERIE_TEST"  >> tests/batterie_test.h
echo "#define BATTERIE_TEST" >> tests/batterie_test.h
echo >> tests/batterie_test.h

i=0
END=.c
cd tests/singular_tests/

# Parse the files contained in the current folder
for entry in $(ls *$END)
do
  # Remove the filetype from the name (useful for later operations)
  substring=${entry%$END}
  # Set a variable for each file in the directory
  echo "TEST$i="$substring >> ../../seperate_tests.sh
  files[$i]="TEST$i"
  i=$(($i + 1))
  str=""

  # Extract the prototypes from the files (needs refining to include everything that is needed, and exclude the rest
    for prototypes in `grep '^[\<int\>\<void\>]' $entry | grep '[^=]*' | grep '.*(.*)' | grep ';$'`
  do
    if [[ "$prototypes" == *\; ]]
    then
      # a complete prototype have been extracted, print it to the file
      str="extern"$str" "$prototypes"\r"
      echo -e $str >> ../batterie_test.h
      str=""
    else
      # keep assembling the string until you find the end
      str=$str" "$prototypes
    fi
  done
  echo -n $str >> ../batterie_test.h
  str=""
done
cd ../..

echo >> tests/batterie_test.h
echo "#endif" >> tests/batterie_test.h
echo >> seperate_tests.sh

i=0
# Compile each file found in the directory using the specified compiler
for compile in ${files[@]}
do
  echo "if [ -e $PATH_2\$$compile.s ]" >> seperate_tests.sh
  echo "then" >> seperate_tests.sh
  echo "  rm $PATH_2\$$compile.s" >> seperate_tests.sh
  echo "fi" >> seperate_tests.sh
  echo "\$OUR_COMPILER $PATH_2\$$compile"$END >> seperate_tests.sh
  echo >> seperate_tests.sh
done

# Move all the .s files that were generated to the asm subdirectory
echo "mv $PATH_2*.s tests/singular_tests/asm/" >> seperate_tests.sh

echo >> seperate_tests.sh

# Compile all the files generated by the compiler with GCC for testing
echo -n gcc -g" " >> seperate_tests.sh
for gcc in ${files[@]}
do
  echo -n $PATH_3\$$gcc.s" " >> seperate_tests.sh
done
echo -n $PATH_1"full_test.c -o full" >> seperate_tests.sh

echo >> seperate_tests.sh

# Execute the test
echo ./full >> seperate_tests.sh

# Only useful for execution with "./seperate_tests.sh", "sh seperate_tests.sh would have been fine
chmod 755 seperate_tests.sh
